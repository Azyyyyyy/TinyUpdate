using System;using System.IO;using System.Text;using NUnit.Framework;using System.Threading;using TinyUpdate.Core.Logging.Loggers;namespace TinyUpdate.Core.Tests.Logging.Loggers{    public class ConsoleLoggerTest : ILoggingTestByEvent<ConsoleLogger>    {        private OutputCap _stream = new OutputCap();        private TextWriter _oldStream;                [OneTimeSetUp]        public void Start()        {            _oldStream = Console.Out;            Console.SetOut(_stream);        }                [OneTimeTearDown]        public void Finish()        {            Console.SetOut(_oldStream);            _stream.Dispose();        }                public ConsoleLoggerTest() : base(new ConsoleLogger(string.Empty))        { }        public override void HookEvent(CancellationTokenSource token)        {            _stream.NewOutput += delegate { token.Cancel(false); };        }    }    public class OutputCap : TextWriter    {        public override Encoding Encoding { get; } = Encoding.Default;        public EventHandler<string>? NewOutput;        public override void Write(string? output)        {            base.Write(output);            if (!string.IsNullOrWhiteSpace(output))            {                NewOutput?.Invoke(this, output);            }        }        public override void WriteLine(string? output)        {            base.WriteLine(output);            if (!string.IsNullOrWhiteSpace(output))            {                NewOutput?.Invoke(this, output);            }        }    }}