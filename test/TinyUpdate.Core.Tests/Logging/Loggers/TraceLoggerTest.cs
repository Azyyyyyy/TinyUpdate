using System;using NUnit.Framework;using System.Threading;using System.Diagnostics;using TinyUpdate.Core.Logging.Loggers;namespace TinyUpdate.Core.Tests.Logging.Loggers{    public class TraceLoggerTest : ILoggingTestByEvent<TraceLogger>    {        public readonly EventTraceListener TraceListener = new EventTraceListener();        [OneTimeSetUp]        public void Start()        {            Trace.Listeners.Add(TraceListener);        }                [OneTimeTearDown]        public void Finish()        {            Trace.Listeners.Remove(TraceListener);        }                public TraceLoggerTest() : base(new TraceLogger(string.Empty))        { }        public override void HookEvent(CancellationTokenSource token)        {            TraceListener.NewOutput += delegate { token.Cancel(false); };        }    }    public class EventTraceListener : DefaultTraceListener    {        public EventHandler<string>? NewOutput;        public override void Write(string? message)        {            base.Write(message);            if (!string.IsNullOrWhiteSpace(message))            {                NewOutput?.Invoke(this, message);            }        }        public override void WriteLine(string? message)        {            base.WriteLine(message);                        if (!string.IsNullOrWhiteSpace(message))            {                NewOutput?.Invoke(this, message);            }        }    }}