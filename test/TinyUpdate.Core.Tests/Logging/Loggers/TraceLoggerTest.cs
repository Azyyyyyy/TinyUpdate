using System;using NUnit.Framework;using System.Diagnostics;using System.Threading.Tasks;using TinyUpdate.Core.Logging.Loggers;namespace TinyUpdate.Core.Tests.Logging.Loggers{    public class TraceLoggerTest : ILoggingTestByEvent<TraceLogger, TraceLoggerBuilder>    {        private readonly EventTraceListener _traceListener = new EventTraceListener();        [OneTimeSetUp]        public void Start()        {            Trace.Listeners.Add(_traceListener);            _traceListener.NewWriteLine += (_, s) => NewOutput?.Invoke(this, s);        }                [OneTimeTearDown]        public void Finish()        {            Trace.Listeners.Remove(_traceListener);        }                public TraceLoggerTest() : base(new TraceLoggerBuilder())        { }                protected override Task TestExceptionOverload(object props)        {            return Task.CompletedTask;            //throw new NotImplementedException();        }    }    public class EventTraceListener : DefaultTraceListener    {        public EventHandler<string>? NewWriteLine;        public EventHandler<string>? NewWrite;        public override void Write(string? message)        {            base.Write(message);            if (!string.IsNullOrWhiteSpace(message))            {                NewWrite?.Invoke(this, message);            }        }        public override void WriteLine(string? message)        {            base.WriteLine(message);                        if (!string.IsNullOrWhiteSpace(message))            {                NewWriteLine?.Invoke(this, message);            }        }    }}